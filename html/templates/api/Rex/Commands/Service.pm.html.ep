% layout 'default';
% title 'Rex::Commands::Service - Manage System Services';

% content_for header => begin
      <meta name="description" content="With this module you can manage Linux services.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>TABLE OF CONTENTS</h1>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#exported_functions">EXPORTED FUNCTIONS</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>NAME</h2>
<p>Rex::Commands::Service - Manage System Services</p>
<p>
</p>

<h2>DESCRIPTION</h2>
<p>With this module you can manage Linux services.</p>
<p>
</p>

<h2>SYNOPSIS</h2>
<pre><code class="perl">
 use Rex::Commands::Service
 
 service apache2 =&gt; "start";
 
 service apache2 =&gt; "stop";
 
 service apache2 =&gt; "restart";
 
 service apache2 =&gt; "status";
 
 service apache2 =&gt; "reload";
 
 service apache2 =&gt; "ensure", "started";
 
 service apache2 =&gt; "ensure", "stopped";</code></pre>
<p>
</p>

<h2>EXPORTED FUNCTIONS</h2>
<ul>
<li><strong>service($service, $action, [$option])</strong></li>


<p>The service function accepts 2 parameters. The first is the service name and the second the action you want to perform.</p>
<ul>
<li><strong>starting a service</strong></li>


<pre><code class="perl">
 task "start-service", "server01", sub {
   service apache2 =&gt; "start";
 };</code></pre>

<li><strong>stopping a service</strong></li>


<pre><code class="perl">
 task "stop-service", "server01", sub {
   service apache2 =&gt; "stop";
 };</code></pre>

<li><strong>restarting a service</strong></li>


<pre><code class="perl">
 task "restart-service", "server01", sub {
   service apache2 =&gt; "restart";
 };</code></pre>

<li><strong>checking status of a service</strong></li>


<pre><code class="perl">
 task "status-service", "server01", sub {
   if( service apache2 =&gt; "status" ) {
     say "Apache2 is running";
   }
   else {
     say "Apache2 is not running";
   }
 };</code></pre>

<li><strong>reloading a service</strong></li>


<pre><code class="perl">
 task "reload-service", "server01", sub {
   service apache2 =&gt; "reload";
 };</code></pre>

<li><strong>ensure that a service will started at boot time</strong></li>


<pre><code class="perl">
 task "prepare", sub {
   service apache2 =&gt; "ensure", "started";
 };</code></pre>

<li><strong>ensure that a service will NOT be started.</strong></li>


<pre><code class="perl">
 task "prepare", sub {
   service apache2 =&gt; "ensure", "stopped";
 };</code></pre>
<p>This function supports the following hooks:</p>
<ul>
<li><strong>before_<em>action</em></strong></li>


<p>For example: before_start, before_stop, before_restart</p>
<p>This gets executed right before the service action.</p>

<li><strong>after_<em>action</em></strong></li>


<p>For example: after_start, after_stop, after_restart</p>
<p>This gets executed right after the service action.</p>

</ul>

</ul>

<li><strong>service_provider_for $os =&gt; $type;</strong></li>


<p>To set an other service provider as the default, use this function.</p>
<pre><code class="perl">
 user "root";
 
 group "db" =&gt; "db[01..10]";
 service_provider_for SunOS =&gt; "svcadm";
 
 task "start", group =&gt; "db", sub {
    service ssh =&gt; "restart";
 };</code></pre>
<p>This example will restart the <em>ssh</em> service via svcadm (but only on SunOS, on other operating systems it will use the default).</p>

</ul>




