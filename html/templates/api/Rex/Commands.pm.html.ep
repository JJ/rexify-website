% layout 'default';
% title 'Rex::Commands - All the basic commands';

% content_for header => begin
      <meta name="description" content="This module is the core commands module.">
      <meta name="keywords" content="Rex, API, Documentation">
% end 


<!-- INDEX BEGIN -->
<div name="index">
<h1>TABLE OF CONTENTS</h1>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#commandlist">COMMANDLIST</a></li>
	<li><a href="#exported_functions">EXPORTED FUNCTIONS</a></li>
</ul>


</div>
<!-- INDEX END -->

<p>
</p>
<h2>NAME</h2>
<p>Rex::Commands - All the basic commands</p>
<p>
</p>

<h2>DESCRIPTION</h2>
<p>This module is the core commands module.</p>
<p>
</p>

<h2>SYNOPSIS</h2>
<pre><code class="perl">
 desc "Task description";
 
 task "taskname", sub {Â ... };
 task "taskname", "server1", ..., "server20", sub { ... };
 
 group "group" =&gt; "server1", "server2", ...;
 
 user "user";
 
 password "password";
     
 environment live =&gt; sub {
    user "root";
    password "foobar";
    pass_auth;
    group frontend =&gt; "www01", "www02";
 };</code></pre>
<p>
</p>

<h2>COMMANDLIST</h2>
<ul>
<li><strong>Cloud Management <a href="/api/Rex/Commands/Cloud.pm.html">Rex::Commands::Cloud</a></strong>

</li>
<li><strong>Cron Management <a href="/api/Rex/Commands/Cron.pm.html">Rex::Commands::Cron</a></strong>

</li>
<li><strong>Database Commands <a href="/api/Rex/Commands/DB.pm.html">Rex::Commands::DB</a></strong>

</li>
<li><strong>SCP Up- and Download <a href="/api/Rex/Commands/Upload.pm.html">Rex::Commands::Upload</a>, <a href="/api/Rex/Commands/Download.pm.html">Rex::Commands::Download</a></strong>

</li>
<li><strong>File Manipulation <a href="/api/Rex/Commands/File.pm.html">Rex::Commands::File</a></strong>

</li>
<li><strong>Filesystem Manipulation <a href="/api/Rex/Commands/Fs.pm.html">Rex::Commands::Fs</a></strong>

</li>
<li><strong>Information Gathering <a href="/api/Rex/Commands/Gather.pm.html">Rex::Commands::Gather</a></strong>

</li>
<li><strong>Manipulation of /etc/hosts <a href="/api/Rex/Commands/Host.pm.html">Rex::Commands::Host</a></strong>

</li>
<li><strong>Get an inventory of your Hardware <a href="/api/Rex/Commands/Inventory.pm.html">Rex::Commands::Inventory</a></strong>

</li>
<li><strong>Manage your iptables rules <a href="/api/Rex/Commands/Iptables.pm.html">Rex::Commands::Iptables</a></strong>

</li>
<li><strong>Kernel Commands <a href="/api/Rex/Commands/Kernel.pm.html">Rex::Commands::Kernel</a></strong>

</li>
<li><strong>LVM Commands <a href="/api/Rex/Commands/LVM.pm.html">Rex::Commands::LVM</a></strong>

</li>
<li><strong>Package Commands <a href="/api/Rex/Commands/Pkg.pm.html">Rex::Commands::Pkg</a></strong>

</li>
<li><strong>Process Management <a href="/api/Rex/Commands/Process.pm.html">Rex::Commands::Process</a></strong>

</li>
<li><strong>Rsync Files <a href="/api/Rex/Commands/Rsync.pm.html">Rex::Commands::Rsync</a></strong>

</li>
<li><strong>Run Remote Commands <a href="/api/Rex/Commands/Run.pm.html">Rex::Commands::Run</a></strong>

</li>
<li><strong>Manage System Services (sysvinit) <a href="/api/Rex/Commands/Service.pm.html">Rex::Commands::Service</a></strong>

</li>
<li><strong>Sysctl Commands <a href="/api/Rex/Commands/Sysctl.pm.html">Rex::Commands::Sysctl</a></strong>

</li>
<li><strong>Live Tail files <a href="/api/Rex/Commands/Tail.pm.html">Rex::Commands::Tail</a></strong>

</li>
<li><strong>Manage user and group accounts <a href="/api/Rex/Commands/User.pm.html">Rex::Commands::User</a></strong>

</li>
<li><strong>Manage your virtual environments <a href="/api/Rex/Commands/Virtualization.pm.html">Rex::Commands::Virtualization</a></strong>

</li>
</ul>
<p>
</p>

<h2>EXPORTED FUNCTIONS</h2>
<ul>
<li><strong>no_ssh([$task])</strong></li>


<p>Disable ssh for all tasks or a specified task.</p>
<p>If you want to disable ssh connection for your complete tasks (for example if you only want to use libVirt) put this in the main section of your Rexfile.</p>
<pre><code class="perl">
 no_ssh;</code></pre>
<p>If you want to disable ssh connection for a given task, put <em>no_ssh</em> in front of the task definition.</p>
<pre><code class="perl">
 no_ssh task "mytask", "myserver", sub {
    say "Do something without a ssh connection";
 };</code></pre>

<li><strong>task($name [, @servers], $funcref)</strong></li>


<p>This function will create a new task.</p>
<ul>
<li><strong>Create a local task (a server independent task)</strong></li>


<pre><code class="perl">
 task "mytask", sub {
    say "Do something";
 };</code></pre>
<p>If you call this task with (R)?ex it will run on your local machine. You can explicit run this task on other machines if you specify the <em>-H</em> command line parameter.</p>

<li><strong>Create a server bound task.</strong></li>


<pre><code class="perl">
 task "mytask", "server1", sub {
    say "Do something";
 };</code></pre>
<p>You can also specify more than one server.</p>
<pre><code class="perl">
 task "mytask", "server1", "server2", "server3", sub {
    say "Do something";
 };</code></pre>
<p>Or you can use some expressions to define more than one server.</p>
<pre><code class="perl">
 task "mytask", "server[1..3]", sub {
    say "Do something";
 };</code></pre>
<p>If you want, you can overwrite the servers with the <em>-H</em> command line parameter.</p>

<li><strong>Create a group bound task.</strong></li>


<p>You can define server groups with the <em>group</em> function.</p>
<pre><code class="perl">
 group "allserver" =&gt; "server[1..3]", "workstation[1..10]";
 
 task "mytask", group =&gt; "allserver", sub {
    say "Do something";
 };</code></pre>

</ul>

<li><strong>desc($description)</strong></li>


<p>Set the description of a task.</p>
<pre><code class="perl">
 desc "This is a task description of the following task";
 task "mytask", sub {
    say "Do something";
 }</code></pre>

<li><strong>group($name, @servers)</strong></li>


<p>With this function you can group servers, so that you don't need to write too much ;-)</p>
<pre><code class="perl">
 group "servergroup", "www1", "www2", "www3", "memcache01", "memcache02", "memcache03";</code></pre>
<p>Or with the expression syntax.</p>
<pre><code class="perl">
 group "servergroup", "www[1..3]", "memcache[01..03]";</code></pre>

<li><strong>batch($name, @tasks)</strong></li>


<p>With the batch function you can call tasks in a batch.</p>
<pre><code class="perl">
 batch "name", "task1", "task2", "task3";</code></pre>
<p>And call it with the <em>-b</em> console parameter. <em>rex -b name</em></p>

<li><strong>user($user)</strong></li>


<p>Set the user for the ssh connection.</p>

<li><strong>password($password)</strong></li>


<p>Set the password for the ssh connection (or for the private key file).</p>

<li><strong>auth(for =&gt; $entity, %data)</strong></li>


<p>With this function you can modify/set special authentication parameters for tasks and groups. If you want to modify a task's or group's authentication you first have to create it.</p>
<p>If you want to set special login information for a group you have to activate that feature first.</p>
<pre><code class="perl">
 use Rex -feature =&gt; 0.31; # activate setting auth for a group
  
 group frontends =&gt; "web[01..10]";
 group backends =&gt; "be[01..05]";
      
 auth for =&gt; "frontends" =&gt; 
                  user =&gt; "root",
                  password =&gt; "foobar";
    
 auth for =&gt; "backends" =&gt;
                  user =&gt; "admin",
                  private_key =&gt; "/path/to/id_rsa",
                  public_key =&gt; "/path/to/id_rsa.pub",
                  sudo =&gt; TRUE;
    
 task "prepare", group =&gt; ["frontends", "backends"], sub {
    # do something
 };
    
 auth for =&gt; "prepare" =&gt;
                  user =&gt; "root";</code></pre>

<li><strong>port($port)</strong></li>


<p>Set the port where the ssh server is listening.</p>

<li><strong>sudo_password($password)</strong></li>


<p>Set the password for the sudo command.</p>

<li><strong>timeout($seconds)</strong></li>


<p>Set the timeout for the ssh connection and other network related stuff.</p>

<li><strong>max_connect_retries($count)</strong></li>


<p>Set the maximum number of connection retries.</p>

<li><strong>get_random($count, @chars)</strong></li>


<p>Returns a random string of $count characters on the basis of @chars.</p>
<pre><code class="perl">
 my $rnd = get_random(8, 'a' .. 'z');</code></pre>

<li><strong>do_task($task)</strong></li>


<p>Call $task from an other task. Will execute the given $task with the servers defined in $task.</p>
<pre><code class="perl">
 task "task1", "server1", sub {
    say "Running on server1";
    do_task "task2";
 };
 
 task "task2", "server2", sub {
    say "Running on server2";
 };</code></pre>
<p>You may also use an arrayRef for $task if you want to call multiple tasks.</p>
<pre><code class="perl">
 do_task [ qw/task1 task2 task3/ ];</code></pre>

<li><strong>run_task($task_name, %option)</strong></li>


<p>Run a task on a given host.</p>
<pre><code class="perl">
 my $return = run_task "taskname", on =&gt; "192.168.3.56";</code></pre>
<p>Do something on server5 if memory is less than 100 MB free on server3.</p>
<pre><code class="perl">
 task "prepare", "server5", sub {
    my $free_mem = run_task "get_free_mem", on =&gt; "server3";
    if($free_mem &lt; 100) {
       say "Less than 100 MB free mem on server3";
       # create a new server instance on server5 to unload server3
    }
 };
    
 task "get_free_mem", sub {
     return memory-&gt;{free};
 };</code></pre>
<p>If called without a hostname the task is run localy.</p>
<pre><code class="perl">
 # this task will run on server5
 task "prepare", "server5", sub {
    # this will call task check_something. but this task will run on localhost.
    my $check = run_task "check_something";
 }
   
 task "check_something", "server4", sub {
    return "foo";
 };</code></pre>
<p>If you want to add custom parameters for the task you can do it this way.</p>
<pre><code class="perl">
 task "prepare", "server5", sub {
   run_task "check_something", on =&gt; "foo", params =&gt; { param1 =&gt; "value1", param2 =&gt; "value2" };
 };</code></pre>

<li><strong>public_key($key)</strong></li>


<p>Set the public key.</p>

<li><strong>private_key($key)</strong></li>


<p>Set the private key.</p>

<li><strong>pass_auth</strong></li>


<p>If you want to use password authentication, then you need to call <em>pass_auth</em>.</p>
<pre><code class="perl">
 user "root";
 password "root";
 
 pass_auth;</code></pre>

<li><strong>key_auth</strong></li>


<p>If you want to use pubkey authentication, then you need to call <em>key_auth</em>.</p>
<pre><code class="perl">
 user "bob";
 private_key "/home/bob/.ssh/id_rsa"; # passphrase-less key
 public_key "/home/bob/.ssh/id_rsa.pub";
 
 key_auth;</code></pre>

<li><strong>krb5_auth</strong></li>


<p>If you want to use kerberos authentication, then you need to call <em>krb5_auth</em>.
This authentication mechanism is only available if you use Net::OpenSSH.</p>
<pre><code class="perl">
 set connection =&gt; "OpenSSH";
 user "root";
 krb5_auth;</code></pre>

<li><strong>parallelism($count)</strong></li>


<p>Will execute the tasks in parallel on the given servers. $count is the thread count to be used.</p>

<li><strong>set_distributor($distributor)</strong></li>


<p>This sets the task distribution module. Default is "Base".</p>
<p>Possible values are: Base, Gearman</p>

<li><strong>template_function(sub { ... })</strong></li>


<p>This function sets the template processing function. So it is possible to change the template engine. For example to Template::Toolkit.</p>

<li><strong>logging</strong></li>


<p>With this function you can define the logging behaviour of (R)?ex.</p>
<ul>
<li><strong>Logging to a file</strong></li>


<pre><code class="perl">
 logging to_file =&gt; "rex.log";</code></pre>

<li><strong>Logging to syslog</strong></li>


<pre><code class="perl">
 logging to_syslog =&gt; $facility;</code></pre>

</ul>

<li><strong>needs($package [, @tasks])</strong></li>


<p>With <em>needs</em> you can define dependencies between tasks. The "needed" tasks will be called with the same server configuration as the calling task.</p>
<p><em>needs</em> will not execute before, around and after hooks.</p>
<ul>
<li><strong>Depend on all tasks in a given package.</strong></li>


<p>Depend on all tasks in the package MyPkg. All tasks will be called with the server <em>server1</em>.</p>
<pre><code class="perl">
 task "mytask", "server1", sub {
    needs MyPkg;
 };</code></pre>

<li><strong>Depend on a single task in a given package.</strong></li>


<p>Depend on the <em>uname</em> task in the package MyPkg. The <em>uname</em> task will be called with the server <em>server1</em>.</p>
<pre><code class="perl">
 task "mytask", "server1", sub {
    needs MyPkg "uname";
 };</code></pre>

</ul>

<li><strong>include Module::Name</strong></li>


<p>Include a module without registering its tasks.</p>
<pre><code class="perl">
   include qw/
      Module::One
      Module::Two
   /;</code></pre>

<li><strong>environment($name =&gt; $code)</strong></li>


<p>Define an environment. With environments one can use the same task for different hosts. For example if you want to use the same task on your integration-, test- and production servers.</p>
<pre><code class="perl">
 # define default user/password
 user "root";
 password "foobar";
 pass_auth;
     
 # define default frontend group containing only testwww01.
 group frontend =&gt; "testwww01";
     
 # define live environment, with different user/password 
 # and a frontend server group containing www01, www02 and www03.
 environment live =&gt; sub {
    user "root";
    password "livefoo";
    pass_auth;
       
    group frontend =&gt; "www01", "www02", "www03";
 };
     
 # define stage environment with default user and password. but with 
 # a own frontend group containing only stagewww01.
 environment stage =&gt; sub {
    group frontend =&gt; "stagewww01";
 };
    
 task "prepare", group =&gt; "frontend", sub {
     say run "hostname";
 };</code></pre>
<p>Calling this task <em>rex prepare</em> will execute on testwww01. 
Calling this task with <em>rex -E live prepare</em> will execute on www01, www02, www03.
Calling this task <em>rex -E stage prepare</em> will execute on stagewww01.</p>
<p>You can call the function within a task to get the current environment.</p>
<pre><code class="perl">
 task "prepare", group =&gt; "frontend", sub {
    if(environment() eq "dev") {
       say "i'm in the dev environment";
    }
 };</code></pre>

<li><strong>LOCAL(&amp;)</strong></li>


<p>With the LOCAL function you can do local commands within a task that is defined to work on remote servers.</p>
<pre><code class="perl">
 task "mytask", "server1", "server2", sub {
     # this will call 'uptime' on the servers 'server1' and 'server2'
     say run "uptime";
     
     # this will call 'uptime' on the local machine.
     LOCAL {
        say run "uptime";
     };
 };</code></pre>

<li><strong>path(@path)</strong></li>


<p>Set the execution path for all commands.</p>
<pre><code class="perl">
 path "/bin", "/sbin", "/usr/bin", "/usr/sbin", "/usr/pkg/bin", "/usr/pkg/sbin";</code></pre>

<li><strong>set($key, $value)</strong></li>


<p>Set a configuration parameter. These Variables can be used in templates as well.</p>
<pre><code class="perl">
 set database =&gt; "db01";
      
 task "prepare", sub {
    my $db = get "database";
 };</code></pre>
<p>Or in a template</p>
<pre><code class="perl">
 DB: &lt;%= $::database %&gt;</code></pre>

<li><strong>get($key, $value)</strong></li>


<p>Get a configuration parameter.</p>
<pre><code class="perl">
 set database =&gt; "db01";
      
 task "prepare", sub {
    my $db = get "database";
 };</code></pre>
<p>Or in a template</p>
<pre><code class="perl">
 DB: &lt;%= $::database %&gt;</code></pre>

<li><strong>before($task =&gt; sub {})</strong></li>


<p>Run code before executing the specified task. 
(if called repeatedly, each sub will be appended to a list of 'before' functions)</p>
<p>Note: must come after the definition of the specified task</p>
<pre><code class="perl">
 before mytask =&gt; sub {
   my ($server) = @_;
   run "vzctl start vm$server";
 };</code></pre>

<li><strong>after($task =&gt; sub {})</strong></li>


<p>Run code after the task is finished.
(if called repeatedly, each sub will be appended to a list of 'after' functions)</p>
<p>Note: must come after the definition of the specified task</p>
<pre><code class="perl">
 after mytask =&gt; sub {
   my ($server, $failed) = @_;
   if($failed) { say "Connection to $server failed."; }
    
   run "vzctl stop vm$server";
 };</code></pre>

<li><strong>around($task =&gt; sub {})</strong></li>


<p>Run code before and after the task is finished.
(if called repeatedly, each sub will be appended to a list of 'around' functions)</p>
<p>Note: must come after the definition of the specified task</p>
<pre><code class="perl">
 around mytask =&gt; sub {
   my ($server, $position) = @_;
   
   unless($position) {
      say "Before Task\n";
   }
   else {
      say "After Task\n";
   }
 };</code></pre>

<li><strong>logformat($format)</strong></li>


<p>You can define the logging format with the following parameters.</p>
<p>%D - Appends the current date yyyy-mm-dd HH:mm:ss</p>
<p>%h - The target host</p>
<p>%p - The pid of the running process</p>
<p>%l - Loglevel (INFO or DEBUG)</p>
<p>%s - The Logstring</p>
<p>Default is: [%D] %l - %s</p>

<li><strong>connection</strong></li>


<p>This function returns the current connection object.</p>
<pre><code class="perl">
 task "foo", group =&gt; "baz", sub {
    say "Current Server: " . connection-&gt;server;
 };</code></pre>

<li><strong>profiler</strong></li>


<p>Returns the profiler object for the current connection.</p>

<li><strong>report($string)</strong></li>

<li><strong>source_global_profile(0|1)</strong></li>


<p>If this option is set, every run() command will first source /etc/profile before getting executed.</p>

<li><strong>last_command_output</strong></li>


<p>This function returns the output of the last "run" command.</p>
<p>On a debian system this example will return the output of <em>apt-get install foobar</em>.</p>
<pre><code class="perl">
 task "mytask", "myserver", sub {
    install "foobar";
    say last_command_output();
 };</code></pre>

<li><strong>case($compare, $option)</strong></li>


<p>This is a function to compare a string with some given options.</p>
<pre><code class="perl">
 task "mytask", "myserver", sub {
    my $ntp_service = case operating_sytem, {
                         Debian  =&gt; "ntp",
                         default =&gt; "ntpd",
                      };
      
    my $ntp_service = case operating_sytem, {
                         qr{debian}i =&gt; "ntp",
                         default     =&gt; "ntpd",
                      };
     
    my $ntp_service = case operating_sytem, {
                         qr{debian}i =&gt; "ntp",
                         default     =&gt; sub { return "foo"; },
                      };
 };</code></pre>

<li><strong>set_executor_for($type, $executor)</strong></li>


<p>Set the executor for a special type. This is primary used for the upload_and_run helper function.</p>
<pre><code class="perl">
 set_executor_for perl =&gt; "/opt/local/bin/perl";</code></pre>

<li><strong>tmp_dir($tmp_dir)</strong></li>


<p>Set the tmp directory on the remote host to store temporary files.</p>

<li><strong>inspect($varRef)</strong></li>


<p>This function dumps the contents of a variable to STDOUT.</p>
<p>task "mytask", "myserver", sub {
   my $myvar = {
      name =&gt; "foo",
      sys  =&gt; "bar",
   };</p>
<pre><code class="perl">

   inspect $myvar;
};</code></pre>

</ul>




