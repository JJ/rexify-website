% layout 'default';
% title 'Use Boxes with any Box Provider';

% content_for header => begin
      <meta name="description" content="Howto work with Rex/Boxes">
      <meta name="keywords" content="Rex, Boxes, Amazon, VirtualBox">
% end

<h1>Working with Rex/Boxes</h1>

<p>Since rex-0.38 it is possible to describe your Rex/Boxes with an external YAML file. So it is possible to use a single Rexfile with all supported Box providers. In other words, you don't need to change your Rexfile if you want to switch for example from VirtualBox-Boxes to Amazon-Boxes.</p>

<h2>The YAML file</h2>

<p>The YAML file describes the Boxes you want to create. Every provider can have its own options, so please check the <a href="/api/index.html#rexbox">API documentation</a> for more information. To use one of these files, you have to add it to the <code>use Rex::Commands::Box</code> command in your Rexfile.</p>

   <pre><code class="perl">use Rex::Commands::Box init_file =&gt; "box.yml";</code></pre>

</p>

<h3>VirtualBox example</h3>
<p>In the following box you'll see an example Box file for VirtualBox.</p>

   <pre><code class="yaml">type: VBox
vms:
   fe01:
      url: http://box.rexify.org/box/ubuntu-server-12.10-amd64.ova
      network:
         1:
            type: bridged
            bridge: eth0
      setup: setup_frontend
   db01:
      url: http://box.rexify.org/box/ubuntu-server-12.10-amd64.ova
      network:
         1:
            type: bridged
            bridge: eth0
      setup: setup_db</code></pre>

<p>This YAML file will instruct Rex to download the VM Base-Box from <code>http://box.rexify.org/box/ubuntu-server-12.10-amd64.ova</code>, and then create 2 VirtualBox VMs: one named <code>fe01</code>, and the other <code>db01</code>.</p>

<p>For the network, it will create a bridged adapter and use <code>eth0</code> for the bridge device.</p>

<p>After the VMs are created and started, it will run the setup tasks given by <code>setup</code>.</p>

<h3>Amazon example</h3>

<p>In the following box you'll see an example Box file for Amazon.</p>
   <pre><code class="yaml">type: Amazon
amazon:
   access_key: {{access-key}}
   private_access_key: {{private-access-key}}
   region: ec2.eu-west-1.amazonaws.com
   zone: eu-west-1a
   auth_key: example
vms:
   fe01:
      ami: ami-c1aaabb5
      type: m1.large
      security_group: default
      setup: setup_frontend
   db01:
      ami: ami-c1aaabb5
      type: m1.large
      security_group: default
      setup: setup_db</code></pre>

<p>This YAML file will create 2 Amazon VMs with the given AMI-ID (<code>ami-c1aaabb5</code>). Notice the extra <code>amazon</code> section in this file.</p>

<h2>The Rexfile</h2>

<p>To use the YAML file you need to create a Rexfile with the deployment logic.</p>

<pre><code class="perl">use Rex::Commands::Box init_file =&gt; "box.yml";

group myboxes =&gt; map { get_box($_-&gt;{name})-&gt;{ip} } list_boxes;

task "box", sub {
   boxes "init";
};</code></pre>

<p>With the <code>list_boxes</code> command you can get an array of all your Boxes. Every element in the array will be a hash reference containing information about the Box, and that can be queried even if the Box is halted.</p>

<p>You can use the <code>get_box</code> command to get the IP of a Box. This command will start the Box and return all information that can be gathered. See <a href="/api/Rex/Commands/Gather.pm.html">get_system_information()</a> for more information.</p>

<p>The gathered information will be cached in the file <code>.box.cache</code> so it won't need to be queried every time.</p>

<p>The command <code>boxes "init";</code> will do the heavy lifting. It will iterate over every Box described in the YAML file, creating and then starting them.</p>

<p>To start or stop Boxes, you can use the following commands.</p>

   <pre><code class="perl">task "stop_boxes", sub {
   boxes stop =&gt; qw/box1 box2/;
};

task "start_boxes", sub {
   boxes start =&gt; qw/box1 box2/;
};</code></pre>
