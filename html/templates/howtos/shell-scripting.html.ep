% layout 'default';
% title 'Using Rex from shell scripts';

% content_for header => begin
      <meta name="description" content="(R)?ex - manage all your boxes from a central point - Shell Scripts">
      <meta name="keywords" content="Shell, Bash, Script, scripting, perl, rex">
% end
      
<h1>Using Rex from Shell Scripts</h1>
<p>As of version 0.43 there is a package called rex-shell-extension that install a lot of rex-* commands. These commands ease the use of Rex inside your shell scripts.</p>
<p>With these commands at hand you can transparently run commands on remote hosts from within your shell scripts.</p>

<h1>Installation</h1>

<p>If you're using the Rex repository for your distribution you just can install the package <i>rex-shell-extension</i>. This will install the rex-* helper scripts to <i>/usr/lib/rex/shell</i>.</p>
<p>If there is no package for your distribution available, you can clone the GitHub repository,</p>

<pre><code class="bash">git clone https://github.com/krimdomu/rex-shell-extension.git
cd rex-shell-extension.git
./setup.sh</code></pre>

<h1>Available Commands</h1>

<p>You can use a lot of predefined commands, but you can also execute any other programm with <i>rex-run</i>.</p>

<p>rex-arp, rex-bunzip2, rex-bzip2, rex-cat, rex-chattr, rex-chgrp, rex-chmod, rex-chown, rex-cp, rex-df, rex-dmesg, rex-dnsdomainname, rex-domainname, rex-download, rex-dpkg, rex-file, rex-find, rex-getfacl, rex-grep, rex-gunzip, rex-gzip, rex-halt, rex-head, rex-hostname, rex-id, rex-ifconfig, rex-ifdown, rex-ifenslave, rex-ifup, rex-install, rex-ip, rex-iptables, rex-iptables-restore, rex-iptables-save, rex-kill, rex-ln, rex-ls, rex-lsattr, rex-lsmod, rex-mkdir, rex-modprobe, rex-mount, rex-mv, rex-netstat, rex-nice, rex-ping, rex-ps, rex-readlink, rex-reboot, rex-remove, rex-rm, rex-rmmod, rex-route, rex-rpm, rex-run, rex-sed, rex-service, rex-setfacl, rex-shutdown, rex-sync, rex-tail, rex-tar, rex-template, rex-test, rex-touch, rex-tracepath, rex-traceroute, rex-umount, rex-uname, rex-upload, rex-zcat</p>

<h1>Managing NTP</h1>

<p>This is a small example that will show you how to manage your NTP installation with a bash script.</p>

<pre><code class="bash">#!/bin/bash

export PATH=/usr/lib/rex/shell:$PATH

REX_REMOTE_USER=root
# if you're using password authentication, or if you're ssh key requires a passphrase
REX_REMOTE_PASSWORD=f00b4r

# if you're using key authentication
REX_REMOTE_PRIVATE_KEY=/path/to/the/private_key
REX_REMOTE_PUBLIC_KEY=/path/to/the/public_key

export REX_REMOTE_USER REX_REMOTE_PASSWORD REX_REMOTE_PRIVATE_KEY REX_REMOTE_PUBLIC_KEY

SERVERS="fe01 fe02 mw01 mw02 db01 db02"

function manage_ntp() {
   # install ntpd package
   rex-install ntpd
   
   # upload configuration file
   cat files/etc/ntp.conf | rex-file /etc/ntp.conf owner=root group=root mode=644

   # restart service and ensure that it gets started at boot-time
   rex-service ntpd restart
   rex-service ntpd ensure=started
}

for srv in ${SERVERS}; do
   export REX_REMOTE_HOST=${srv}
   manage_ntp
done</code></pre>





