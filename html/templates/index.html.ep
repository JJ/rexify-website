% layout 'default';
% title '(R)?ex - A simple framework to simplify system administration and datacenter automation';


<div style="float: left"> <!-- needed for bootstrap ... -->
<div class="row-fluid">
   <div class="span4">
      <h2>Why use Rex?</h2>
      <ul>
         <li>If you have to do a task more than once, automate it!</li>
         <li>Don‘t forget an installation step anymore.</li>
         <li>Automation reduces the risk of failure, and lets you do your real work.</li>
      </ul>
   </div><!--/span-->
   <div class="span4">
      <h2>Advantages</h2>
      <ul>
         <li>Uses SSH, no agent required</li>
         <li>Seamless integration, no conflicts</li>
         <li>Easy to use and extend</li>
         <li>Easy to learn, it‘s just plain Perl</li>
      </ul>
   </div><!--/span-->
   <div class="span4">
      <h2>Open source</h2>
      <p>We believe in the idea of open source. So Rex, and all its parts are released under the Apache 2.0 license.</p>
      <p>You‘re invited to join the community to make Rex better and better.</p>
   </div><!--/span-->
</div><!--/row-->

<div class="row-fluid">
   <div class="span4">
      <!-- <p><a class="btn" href="#">View details &raquo;</a></p> -->
   </div><!--/span-->
   <div class="span4">
      <p><a class="btn" href="/howtos/perl.html">Just enough Perl for Rex &raquo;</a></p>
   </div><!--/span-->
   <div class="span4">
      <p><a class="btn" href="/contribute">View details &raquo;</a></p>
   </div><!--/span-->
</div><!--/row-->
</div>

<h2>Uptime?</h2>
<p>This command line example will execute <code>uptime</code> on all the given hosts (<code>frontend01</code>, <code>frontend02</code>, ..., <code>db04</code>).</p>
<pre><code class="bash">$ rex -H 'frontend[01..15] middleware[01..05] db[01..04]' -e 'say run "uptime"'
</code></pre>

<p>The same, but with a <i>Rexfile</i></p>
<pre><code class="perl">use Rex -feature =&gt; ['1.0'];

desc 'Get uptime';
task 'uptime', sub {
   say run 'uptime';
};
</code></pre>

<p>Now you can run your task with this command:</p>
<pre><code class="bash">$ rex -H 'frontend[01..15] middleware[01..05] db[01..04]' uptime
</code></pre>

<h2>Keep your configuration in sync</h2>
<p>This example will install the Apache webserver on 5 machines, and keep their configuration in sync. If the deployed configuration file changes, it will automatically reload the service.</p>
<p>If this task gets executed against a "virgin" host (where no Apache is installed yet), it will first install it.</p>

<pre><code class="perl">use Rex -feature =&gt; ['1.0'];

user 'root';
group frontend =&gt; 'frontend[01..05]';

desc 'Prepare frontend server';
task 'prepare', group =&gt; 'frontend', sub {
  pkg 'apache2',
    ensure =&gt; 'present';

  service 'apache2',
    ensure =&gt; 'started';
};

desc 'Keep configuration in sync';
task 'configure', group =&gt; 'frontend', sub {
  needs 'prepare';

  file '/etc/apache2/apache2.conf',
    source    =&gt; 'files/etc/apache2/apache2.conf',
    on_change =&gt; sub { service apache2 =&gt; 'reload'; };
};
</code></pre>

<h2>Using sudo?</h2>
<p>You can also run everything with <code>sudo</code>. Just define the sudo password and activate this mode.</p>
<pre><code class="perl">use Rex -feature =&gt; ['1.0'];

user 'ubuntu';
group frontend =&gt; 'frontend[01..05]';
sudo TRUE;
sudo_password 'mysudopw';

desc 'Prepare frontend servers';
task 'prepare', group =&gt; 'frontend', sub {
  pkg 'apache2',
    ensure =&gt; 'latest';

  service 'apache2',
    ensure =&gt; 'started';
};

desc 'Keep configuration in sync';
task 'configure', group =&gt; 'frontend', sub {
  needs 'prepare';

  file '/etc/apache2/apache2.conf',
    source    =&gt; 'files/etc/apache2/apache2.conf',
    on_change =&gt; sub { service apache2 =&gt; 'reload'; };
};
</code></pre>
